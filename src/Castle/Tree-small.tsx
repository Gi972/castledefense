/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ../../../public/castle/GLB_format/tree-small.glb -t -k 
*/

import * as THREE from 'three'
import { JSX } from 'react'
import { Instance, Instances, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    ['tree-small_1']: THREE.Mesh
  }
  materials: {
    colormap: THREE.MeshStandardMaterial
  }
}

export function TreeSmall(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    '/public/castle/GLB_format/tree-small.glb'
  ) as unknown as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh
        name="tree-small_1"
        geometry={nodes['tree-small_1'].geometry}
        material={materials.colormap}
      />
    </group>
  )
}

export function MTrees({ data, range, scale }: { data: any; range: any; scale: number }) {
  const { nodes, materials } = useGLTF(
    '/public/castle/GLB_format/tree-small.glb'
  ) as unknown as GLTFResult
  return (
    <Instances
      scale={scale}
      range={range}
      material={materials.colormap}
      geometry={nodes['tree-small_1'].geometry}
    >
      {data.map((props: any, i: number) => (
        <ITree key={i} {...props} />
      ))}
    </Instances>
  )
}

function ITree(props: any) {
  return (
    <group {...props}>
      <Instance />
    </group>
  )
}

useGLTF.preload('/public/castle/GLB_format/tree-small.glb')
